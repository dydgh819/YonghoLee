**231204** -----------------------------------------------------------

# 그래프 그리기
import matplotlib.pyplot as plt

plt.plt([1,2,3,4])
plt.ylabel('some numbers')
plt.show()


실행 후 error 발생되면
# matplotlib 설치
pip install matplotlib


# 가상 폴더 만들기
python -m venv ch01_env
python -m venv ch02_env


#가상 환경 실행
ch01_env\Scripts\activate.bat


# Key
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


platform.openai.com
openai.com/pricing
platform.openai.com/tokenizer

# 웹 상에서 앱을 만드는 python frame work
https://streamlit.io/
pip install streamlit
streamlit hello

http://localhost:8501/

streamlit run 01_text.py


# 폴더 생성
01_chatGPT_API_test.ipynb

import openai
(실행 shift + enter) error 발생되면,

pip install openai


client = openai.OpenAI(api_key="")
response = client.chat.completions.create(
    model="gpt-3.5-turbo",
    messages=[{"role":"user","content":"Tell me how to make a pizza"}]
)


print(response)
print(type(response))

print(response.choices[0].message.content)

# role
system - 시스템 컨트롤
{"role":"system",...}
{"role":"assistant",...}
user - 사용자
asistence - 이전 정보

# 특정 버전의 openai 설치하기
openai 1.3.7
pip install openai==1.3.7

# 토큰 확인
print(response.usage)

# 토큰 가격 확인
total_bill = response.usage.prompt_tokens * 0.0015/1000 + response.usage.completion_tokens * 0.002/1000
print(total_bill*1300)



# system 역할 설정 해보기
response = client.chat.completions.create(
    model="gpt-3.5-turbo",
    messages=[
        {"role":"system","content":"너는 친절하게 답변해주는 비서야"},
        {"role":"user","content":"2020년 월드시리즈 우승은 누가 했어?"}]
)
print(response.choices[0].message.content)



# 질문 거절하도록 system 설정 해보기
response = client.chat.completions.create(
    model="gpt-3.5-turbo",
    messages=[
        {"role":"system","content":"You're a chatbot that refuse to answer and says sorry when users ask questions."},
        {"role":"user","content":"2020년 월드시리즈 우승은 누가 했어?"}]
)
print(response.choices[0].message.content)



response = client.chat.completions.create(
    model="gpt-3.5-turbo",
    messages=[
        {"role":"system","content":"You are a translator who translates user input."},
        {"role":"user","content":"2020년 월드시리즈 우승은 누가 했어?"}]
)
print(response.choices[0].message.content)



# 이전 대화를 포함하여 답변하기
response = client.chat.completions.create(
    model="gpt-3.5-turbo",
    messages=[
        {"role":"user","content":"2002년 월드컵에서 가장 화제가 되었던 나라는 어디야?"}, # 이전 질문
        {"role":"assistant","content":"바로 예상을 뚫고 4강 진출 신화를 일으킨 한국입니다."}, # 이전 답변
        {"role":"user","content":"그 나라가 화제가 되었던 이유를 자세하게 설명해줘"} # 마지막 질문
        ] 
)
print(response.choices[0].message.content)



# 스트림릿 사용
import streamlit as st

st.title('이것은 타이틀 입니다.')

st.header('헤더를 입력할 수 있습니다.')

st.subheader('이것은 서브헤더입니다.')

st.caption('캡션입니다!')

sample_code = '''
def funtion():
    print('hello, world!')
'''
st.code(sample_code, language="python")

# 일반적인 Text
st.text('일반 텍스트')

st.markdown('스트림릿은 **마크다운 문법**을 지원합니다.')


**231205** -----------------------------------------------------------

실습 순서
1) 가상환경 생성
python -m venv ch03_env

2) 가상환경 활성화
ch03_env\scripts\activate.bat

3) 필요한 라이브러리 설치(기본 라이브러리)
pip install streamlit
pip install openai

streamlit run 01_test.py
streamlit run 03_chart.py


pip install matplotlib
pip install plotly




01_text.py
import streamlit as st

# 제목(큰 글씨)
st.title('이것은 타이틀 입니다.')

# 부제목(중간 큰 글씨)
st.header('헤더를 입력할 수 있습니다.')

# 부부제목(조금 큰 글씨)
st.subheader('이것은 서브헤더입니다.')

# 캡션
st.caption('캡션입니다!')

# 파이썬 코드를 띄우기
sample_code = '''
def funtion():
    print('hello, world!')
'''
st.code(sample_code, language="python")

# 일반적인 Text
st.text('일반 텍스트')

# 강조(볼드체)
st.markdown('스트림릿은 **마크다운 문법**을 지원합니다.')

# 한 줄 끊기
st.markdown('---')

# 텍스트 색상 넣기
st.markdown("텍스트 색상 --> :green[초록색]으로 그리고 **:blue[파란색]** 볼드체")
st.markdown(":green[$\sqrt{x^2+y^2}=1$] --> latex 문법으로 만든 수식")



02_data.py
import streamlit as st
import pandas as pd

st.title("데이터프레임 튜토리얼")

df = pd.DataFrame({
    'first col':[1,2,3,4],
    'second col':[10,20,30,40]
})

# 데이터 프레임을 출력
st.dataframe(df,use_container_width=True)

# 고정 테이블
st.table(df)

# 매트릭
st.metric(label='온도', value='10도', delta='1.2도')
st.metric(label='삼성전자', value='61,000원', delta='-1,200원')



03_chart.py

import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
import plotly.graph_objects as go


# 라인 차트 (행20개, 열3개, 랜덤 숫자)
chart_data = pd.DataFrame(
    np.random.randn(20,3),
    columns=['a','b','c']
)
st.line_chart(chart_data)


# 바 차트
st.bar_chart(chart_data)


# Histogram --> matplotlib 라이브러리
arr = np.random.normal(1,1,size=100)
fig, ax = plt.subplots()
ax.hist(arr,bins=20)
st.pyplot(fig)


# plotly
fig = go.Figure(data=go.Scatter(
    x=[1,2,3,4],
    y=[10,20,30,40],
    mode='markers',
    marker=dict(size=[40,60,80,100],
                color=[0,1,2,3])
))
st.plotly_chart(fig,use_container_width=True)





